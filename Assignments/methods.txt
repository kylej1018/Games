Mystery:
Make a game in which a character must travel between multiple locations using WASD.
Each location should be represented as a box, with one as a different color to denote current location.
There should be a storyline which your character has to go to different locations and perform various tasks to advance.
The story should be printed on the left side of the screen, updated as needed.
There should be one method per location that focuses on painting it according to the current story status.
There should be one method per location that focuses on allowing travel according to the current story status.

Suggestions:
Unsafe locations (or unsafe actions) depending on the story status.  A health bar might add some stakes.
Do travel path options change?
An inventory on the right side of the screen?

Methods:

Methods are useful when you have a specific function for the computer to do.
They're best when you want to do a similar thing lots of times, but they're also good for just organizing your code better.
You declare a method like so:
	public static boolean checkValue(int x, int y) { //returns true if x and y are the same.
		//code here
	}
public means it's accessible to other programmers using your code.
All the methods we use, from e.getX() to str.toLowerCase() are public, which is why we can use them.
Obviously, our code won't be added to the official Java library...but there will come a day when we have our own library and need multiple codes in one program.
The opposite of public is private.  Very few methods are private.
Interestingly, you can declare global variables public and private.
	It's usually bad for a different class to be able to change or access your variables unless they go through the effort to call a method designed to do so.
Most global variables are private.  Most methods are public.
Ultimately, since we're not creating objects yet, we don't have to really worry about accessing our methods from somewhere else.

You have the option to include static after public/private.
Don't worry about static yet, as we're not creating objects.

Then you have the method return - boolean in this case.
You can return anything, an int, an array, or even nothing (void).
This means that when you call that array, you can store the output.
	boolean b = checkvalue(4, 3);

Next is the method name, "checkValue."
Remember that conventionally, method names start with a lowercase letter and anything with multiple "words" gets each word capitalized and spaces removed.

Finally, you have the parameters.  When your program calls the method, they're called arguments, but when you're defining them, they're called parameters.
They go in the parentheses.  You can have as many as you want, separated by commas, or a set of empty parentheses.
Each parameter needs a variable type (can be primitive or not) and a name that is used in the method definition.
You only want to pass along parameters needed to execute the method.
If you can cut down on the number of global variables by passing more parameters, it's usually recommended.
When you call a method and pass parameters, you communicate between two places in your code.  A global variable is recommended only if used in lots of methods.
	Also, sometimes you are using existing methods, and you don't want to redefine parameters (like from mouseClicked to myPaint(Graphics g)).
	If both those methods have to know a variable, like an x-coordinate of the mouse, that is an appropriate time for a global variable.

In the body of the method, you'll usually have a return statement.  It looks like this:
	return true;
That return type should match the return type in the method definition line.
When the return line is executed, the method stops immediately and the code returns to where the method was called.
In case of a void method, you can just have
	return;
It's discouraged but occasionally necessary to use multiple returns in a method in various circumstances.
	if(x == y) {
		return true;
	}
	return false;
The method will only return false if return true never happens.  No ELSE statement needed!

Plan to comment every method with its intended purpose in a header.  You may also want to comment on the return type, parameters, and circumstances where the method is called.
By convention, you want to define methods in your code, in the order they're called.
Usually main() is first, then init(), then methods called from init(), then paint(), then methods called from paint(), then Listeners, then methods called from Listeners().
Anything that *can* stand alone should probably get its own method, especially if you can name it something obvious.
	public void drawSplashScreen(Graphics g) will be in a vast majority of our codes, with the Graphics argument passed from paint or myPaint.
You want to keep your methods short, including main(), init(), paint(), and Listeners.
I usually don't use a method if the method contains a single loop or a single conditional.  I do usually start a loop or make a conditional and call methods from within it because it's easier to read.

You should practice some methods.  Focus on Warmups, Strings, Logics, Arrays, and AP-1.  We'll learn Recursion later.  Map and Functional, you're on your own.
https://codingbat.com/java

You should learn how to read documentation in the lesson after this.