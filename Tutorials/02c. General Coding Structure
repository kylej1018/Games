# = need to know
~ = convention
blank = background knowledge

When your computer reads your code, it starts at the first line, reads until it hits a semicolon ; and then does that line.  It then moves onto the next line.
Sometimes you can group lines together in curly brackets {}.  Lines in a bracket typically do similar things.

Open the code for Picture and follow along with this tutorial.  Try to find an example of each of these items in the Picture code before starting the assignment.
Here's the basic outline of every code:

Import Statements:
#Codes usually start with import statements.  When you downloaded Java, you downloaded a lot of helpful things, but your code won't use them unless they're imported.
#You might import a package that makes it easy to draw things, or do mathematical operations.
#If your code returns an error when compiling that it doesn't recognize something or it thinks you should define it, double-check what imports you need.
Example time!
 import java.awt.*;
 import java.awt.event.*;
 import java.lang.Object;
 These are three distinct import statements.  The * means "everything in that package."  So the entire contents of the java.awt package are imported in the first line.
 java.awt.event is not in the java.awt package.  Common misconception.  It's a whole separate package.
 java.lang.Object IS in the java.lang folder.  I know this because Object is capitalized, meaning it's a class, but everything before it is not, meaning it's a package.
 Thus, if I had written java.lang.* then I don't need to write java.lang.Object
 These packages and the classes inside them all live in your computer system, in the same file where you downloaded Java.
~If only one class is used from a package, import that class by name.  If two or more, use the * symbol.
~For your first few assignments, I'll give you the imports.  After a while, you can copy them from previous codes.

Class:
#Below import statements is something like public class Picture.
#Whatever the word is after "class" has to be the same name as the name of your file (Picture with a capital P, in this case).

Global Variables:
#After the class statement is often a collection of variables, like int x = 10;
#You can declare a variable anywhere (it's called a local variable) but you can only use it within those curly brackets.
 The reason there are usually lots at the beginning (global variables) is because ALL curly brackets can use them.
#There are some things you CAN'T name your variables because they're reserved keywords for specific java functions.
 For instance, don't name your variable "class" because "class" is used at the top of your code, like public class Picture.
 A complete list of keywords not to use is here: https://en.wikipedia.org/wiki/List_of_Java_keywords
~We will have an assignment later that teaches you some different types of variables.

Main:
#After the variables is something called public static void main(String[] args) and it's usually essential for the code.

Init:
#After main, you'll see something called public void init() and it's usually nonessential.
Init is short for initialization because it often initializes most of your global variables.  It also usually "starts" the game (or whatever) you've programmed.
Init can happen whenever you reset the game.

PreInit:
#After main, you'll see something called public void preInit() and it's usually not essential by Java standards but essential for our specific projects.
This is something that I have provided to you for your codes that require painting, clicking the mouse, or popup windows.
I call it preInit() because it runs early on in the code, before init(), which initializes most things.
PreInit should only happen once.  You don't want two popup windows.  You should not ever have to write
 preInit();

Public Void:
#After main is a series of curly-bracket-enclosed areas labeled public void, such as public void myPaint (Graphics g).
 These are called methods.  You'll learn how to make your own methods later.

#Reminder, almost every line ends in a semicolon.  Each line is one task for the computer to do.
#The only exceptions are the lines that have an open curly bracket.  These allow tasks to be grouped together.
