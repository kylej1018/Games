This tutorial's primary purpose is to solidify how you should be reviewing old tutorials.

Question: How do you write a file gradually, updating it at several different moments in your code?
And, ideally, without putting your ENTIRE code in the try-catch block, which is bad form for the many places an exception might be caught.
Normally the syntax goes like this:
FileWriter file = new FileWriter(loc);
PrintWriter pw = new PrintWriter(file);
pw.println("output");
pw.close();

Problem: when assigning your FileWriter to be a new FileWriter, Eclipse says there's an unhandled exception.
Solution: Put it in the try-catch block (Tutorial 05d for review).
try {
  FileWriter file = new FileWriter(loc);
}
catch (IOException ex) {
  ex.printStackTrace();
}
PrintWriter pw = new PrintWriter(file);
pw.println("output");
pw.close();

Problem: file is a local variable now, only in the try-catch block.  Eclipse says file can't be resolved to a variable.
You can't put PrintWriter in the try block, or you can't use pw.println("output") outside the try-catch block.
Solution: Declare and initialize FileWriter on two different lines.

FileWriter file;
try {
  file = new FileWriter(loc);
}
catch (IOException ex) {
  ex.printStackTrace();
}
PrintWriter pw = new PrintWriter(file);
pw.println("output");
pw.close();

Problem: Eclipse says file may not have been initialized.
Solution: initialize it with null.
FileWriter file = null;
try {
  file = new FileWriter(loc);
}
catch (IOException ex) {
  ex.printStackTrace();
}
PrintWriter pw = new PrintWriter(file);
pw.println("output");
pw.close();

Null is a handy keyword that simply means "empty."  The variable exists and it references something, but that something is an empty value.
You can assign anything to be null - Strings, ArrayLists.
Null is usually used in cases like this, where declaration and initialization are separated.
Putting the initializiation in a conditional or a loop makes Java think it may not happen (even if you know it will).
This also explains the phrasing behind NullPointerException, which comes up if you invoke a method on something uninitialized - it just means something is empty.
For instance, you'd get that exception for trying this:
ArrayList<String> arr;
int x = arr.size();

But this tutorial is about more than just null.  It's also about organization.
As your codes get more complicated, and as you keep advancing through CodingBat puzzles, you'll want to review some of the past tutorials.
Variables and Coding Conventions are just as important now as ever.
Most of the tutorials that probably confused you at first pass might make more sense now that you've seen them in practice.
