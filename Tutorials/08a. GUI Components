The greatest Java GUI reading on the Internet: https://www.ntu.edu.sg/home/ehchua/programming/java/j4a_gui.html
You may want to reference it for visuals and examples for all the GUI tutorials.

What is a component?
A component is something that can respond to an Event, like a button, a check box, a drop-down menu.
Let's pretend we're wanting to add a button that says "Click!" to your window.
Inside init(), you'll want the following:
  JButton myButton = new JButton("Click!");
  myButton.addActionListener(this);
The first line creates the button.
The second line establishes the Listener...which you may recall from Tutorial 3c means you need a method, whether it's blank or not.
That additional method is called actionPerformed.
  public void actionPerformed(ActionEvent e) {
    //code here
  }
You may have noticed a problem that wasn't present for a keyboard or mouse listener: What if there's more than one button?
Option 1 is to see where the event came from:
  if(e.getSource().equals(myButton)) {
    //code
  }
Kind of like Strings, you want to use .equals instead of == because you're testing if the button is the same, not if the reference is the same.
This also means you'll need myButton to be a global variable.

Option 2 is to actually make a different actionPerformed for each component.  This should happen inside init().
  JButton myButton = new JButton("Click!");
  myButton.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent e) {
      //code here
    }
  });
You'll want to do Option 2 if there are lots of components doing different things.

Why would we use a JButton instead of just a rectangle like in PaintPalette?
~It looks nicer.
~You don't have to keep track of its coordinate location.

Sometimes a button isn't quite the right thing for your program.  This link offers pictures of several different components and a preview of containers.
http://web.mit.edu/6.005/www/sp14/psets/ps4/java-6-tutorial/components.html
