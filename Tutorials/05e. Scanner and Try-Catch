Most programs we've run so far use a popup JFrame window.  You'll see the words JFrame and JPanel in PaintPalette, PrettyLines, and Picture.  Not here.
That means we can't introduce a Listener or myPaint to this program.
Scanner and System.out.print are much faster and easier than Listener and myPaint.  But they can't do graphics.

Remember from Tutorial 5a that you can use System.out.print or println to debug.
You should use System.out.print to print your Loops results as well.

Scanner is how you take input from the user.
Like Random, you have to declare a new Scanner object ONCE per code:
  Scanner sc = new Scanner(System.in);
Then you can take as much input as you want with
  String s = sc.nextLine();
sc.nextLine() always gives you a String.  But sometimes you want numbers.  You need a try-catch block for that.
  int num1;
  try {
    num1 = Integer.parseInt(sc.nextLine()); //tries to turn the nextLine into a String.  If it fails, it jumps to the curly brackets after catch.
  }
  catch (Exception e) {}
Remember, num1 has to be declared outside the try-catch curly brackets, or else it's too local.

What is a try-catch block?
Exceptions happen when the user does something they're not supposed to.
If you don't try/catch, then the program will shut down as soon as the exception happens.
In this case, an Exception would be if your user typed something that wasn't a number and the Integer.parseInt fails.
Should you make the computer say something snarky if an exception is found?  There's brackets after catch for that purpose.
Sometimes you want to make a loop surrounding your try/catch block so that it stays stuck if the Integer.parseInt keeps failing.
You could add a statment in the try block, after Integer.parseInt, that helps break the loop.  It'll only execute if Integer.parseInt finishes successfully.
